
const:
	# Definition Vektoren aus Sets
	s[] := (
			..,									# unendlicher Set: alle integers und alle strings
			..6,								# unendlicher Set: alle integers kleiner gleich dem Wert
			6..,								# unendlicher Set: alle integers groesser gleich dem Wert
			.integer.,							# unendlicher Set: alle integers
			.string.,							# unendlicher Set: alle strings
			set(),								# leerer Set
			0..6,								# Algorithmischer Set mit Schrittweite 1
			1..7,								# Algorithmischer Set mit Schrittweite 1
			4..9,								# Algorithmischer Set mit Schrittweite 1
			3(-1)2,								# Algorithmischer Set mit beliebiger Schrittweite
			set( "qwe" ),						# Aufzaehlungsset
			set( 7, "qwe", 6, "fe", 5, 8 )		# Aufzaehlungsset
		);

	t[] := (
			1..8,
			5..7,
			7(-1)5,
			set( 7, "qwe", 6, "fe", 5, 8 ),
			set( "qwe" ),
			set( 6, 7, 5 ),
			set( 5, 6, 7, 8, "fe", "qwe" )
		);

	# Ausgabe Sets
	{ i in 1..dim(s[]): echo i + " (" + type(s[i]) + "): " + string(s[i]); }

	# Set-Operationen
	{ i in defset(s[5..5]), j in defset(s[]):
		echo string(s[i]) + " + " + string(s[j]) + " : " + string(s[i] + s[j]);		# Vereinigung
		echo string(s[i]) + " * " + string(s[j]) + " : " + string(s[i] * s[j]);		# Durchschnitt
	}

	# Vereinigung von Sets ueber SUM
	q := sum{ i in 12(-1)6: s[i] };
	echo q;
	{ i in q: echo i; }

	# Test ob Element in Set enthalten
	{ i in 1..dim(s[]): echo s[i];
		echo "1: " + (1 element s[i]);
		echo "8: " + (8 element s[i]);
		echo "fe: " + ("fe" element s[i]);
	}

	# Vergleich von Sets
	{ i in defset(t[]), j in defset(t[]):
		echo string(t[i]) + " < " + string(t[j]) + " : " + (t[i] < t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " <= " + string(t[j]) + " : " + (t[i] <= t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " > " + string(t[j]) + " : " + (t[i] > t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " >= " + string(t[j]) + " : " + (t[i] >= t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " = " + string(t[j]) + " : " + (t[i] = t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " == " + string(t[j]) + " : " + (t[i] == t[j]);		# auch Reihenfolge der Elemente wird geprueft
		echo string(t[i]) + " <> " + string(t[j]) + " : " + (t[i] <> t[j]);		# keine Beruecksichtigung der Reihenfolge
		echo string(t[i]) + " != " + string(t[j]) + " : " + (t[i] != t[j]);		# auch Reihenfolge der Elemente wird geprueft
	}

	# Ueber Bedingung konstruierte Sets
	a := set{ i in t[7], !(i element t[6]): i };
	echo a;

	b := set{ i in t[7], !(i element t[5]): i };
	echo b;

