//
// Robuste Optimierung
//
// Beispiel von Michael Roemer 20.10.2007
// nach Lassmann, Rogge 1990
//

// Koeffizienten und Variablen fuer das Basismodell
const:

	// Erloese pro Produkt
	Erloes[] = (50, 80, 110, 75, 100, 60, 85);

	// Maximal verfuegbare Kapazitaet pro Arbeitsschritt
	Drehen   = 16000;
	Bohren   = 10000;
	Fraesen  = 15000;
	Montage  = 20000;
	Material = 13000;

	Kapazitaet[] = (Drehen, Bohren, Fraesen, Montage, Material);

	// Aufwaende pro Produkt pro Arbeitsschritt
	Aufwand[,] =
		((10,  0, 20, 10, 18, 25,  0),
		 ( 5,  8,  0, 12, 14,  0, 19),
		 (20, 15, 18,  0, 26, 17, 18),
		 (10, 16, 17, 18,  0, 20, 21),
		 ( 0,  0, 13, 17, 18,  0, 14));

	// Untere und obere Schranken pro Produkt
	UntereSchranke[] = (200,  50, 250, 350,  50,  50,  70);
	ObereSchranke[]  = (280,  80, 300, 400, 100,  85, 150);

	// Dimensionierung der Matrizen und Vektoren muss zueinander passen
	// Hier direkt fuer Fehlermeldung pruefen
	Zeilen = dim(Aufwand[,]);
	Spalten = dim(Aufwand[1,]);

	{Spalten != dim(Erloes[]): error "Dimensionierung Erloesvektor falsch"; }
	{Spalten != dim(UntereSchranke[]): error "Dimensionierung untere Schranken falsch"; }
	{Spalten != dim(ObereSchranke[]): error "Dimensionierung obere Schranken falsch"; }
	{Zeilen != dim(Kapazitaet[]): error "Dimensionierung Kapazitaetsvektor falsch"; }
	
var:

	// Variablen fuer Stueckzahl pro Produkt
	// Fuer Stueckzahlen waere wohl prinzipiell Ganzzahligkeit sinnvoll (Datentyp integer),
	// hier aber als stetig definiert
	x[1..Spalten] : real[0..];

// Zusaetze fuer die robuste Optimierung
const:
	// Gamma wird hier ueber die Konsole eingelesen
	// (Stattdessen koennte es natuerlich auch hier direkt festgelegt werden)
	// (Hier wird der Einfachheit halber ein Gamma fuer alle Zeilen verwendet,
	//  statt es zeilenweise verschieden festzulegen; das waere natuerlich genauso gut moeglich)
	Gamma = 3; #import(stdin, "Gamma fuer robuste Optimierung: ");

	// Test, ob Gamma im erlaubten Bereich liegt, sonst Fehlermeldung
	{Gamma < 0:          error "Gamma darf nicht kleiner als 0 sein"; }
	{Gamma > Spalten:    error "Gamma darf nicht groesser als die Anzahl der Spalten sein"; }

	// Maximale Abweichung in den Aufwaenden um 10%
	{i = 1(1)Zeilen, j = 1(1)Spalten:
		Abweichung[i,j] = 0.1 * Aufwand[i,j];
	}

var:
	// Variablen q und p entsprechend der Zeilen- und Spaltenanzahl der Aufwandsmatrix benoetigt
	q[1..Zeilen] : real[0..];
	p[1..Zeilen, 1..Spalten] : real[0..];


// Zielfunktion
objective:
	Ziel: Erloes[]T * x[] -> max;
	
// Restriktionen
constraint:
	// Die Restriktionen fuer das Basisproblem koennten einfach geschrieben werden mit:
	//       Aufwand[,] * x[] <= Kapazitaet[];

	// Fuer die robuste Optimierung muss hier stattdessen zeilenweise formuliert werden
	{i = (1..Zeilen):
		Aufwand[i,]T * x[] + Gamma * q[i] - sum{j=1(1)Spalten: -p[i,j]} <= Kapazitaet[i];
	}

	// Restriktionen fuer die Abweichung
	{i = 1..Zeilen, j = 1..Spalten:
		q[i] + p[i,j] >= Abweichung[i,j] * x[j];
	}

	// Schranken
	UntereSchranke[] <= x[] <= ObereSchranke[];

