#line 1 "_CMPL_Scanner.cc"

#line 3 "_CMPL_Scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define cmpl_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer cmpl_create_buffer
#endif

#ifdef yy_delete_buffer
#define cmpl_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer cmpl_delete_buffer
#endif

#ifdef yy_scan_buffer
#define cmpl_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer cmpl_scan_buffer
#endif

#ifdef yy_scan_string
#define cmpl_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string cmpl_scan_string
#endif

#ifdef yy_scan_bytes
#define cmpl_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes cmpl_scan_bytes
#endif

#ifdef yy_init_buffer
#define cmpl_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer cmpl_init_buffer
#endif

#ifdef yy_flush_buffer
#define cmpl_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer cmpl_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define cmpl_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state cmpl_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define cmpl_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer cmpl_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define cmplpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state cmplpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define cmplpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state cmplpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define cmplensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack cmplensure_buffer_stack
#endif

#ifdef yylex
#define cmpllex_ALREADY_DEFINED
#else
#define yylex cmpllex
#endif

#ifdef yyrestart
#define cmplrestart_ALREADY_DEFINED
#else
#define yyrestart cmplrestart
#endif

#ifdef yylex_init
#define cmpllex_init_ALREADY_DEFINED
#else
#define yylex_init cmpllex_init
#endif

#ifdef yylex_init_extra
#define cmpllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra cmpllex_init_extra
#endif

#ifdef yylex_destroy
#define cmpllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy cmpllex_destroy
#endif

#ifdef yyget_debug
#define cmplget_debug_ALREADY_DEFINED
#else
#define yyget_debug cmplget_debug
#endif

#ifdef yyset_debug
#define cmplset_debug_ALREADY_DEFINED
#else
#define yyset_debug cmplset_debug
#endif

#ifdef yyget_extra
#define cmplget_extra_ALREADY_DEFINED
#else
#define yyget_extra cmplget_extra
#endif

#ifdef yyset_extra
#define cmplset_extra_ALREADY_DEFINED
#else
#define yyset_extra cmplset_extra
#endif

#ifdef yyget_in
#define cmplget_in_ALREADY_DEFINED
#else
#define yyget_in cmplget_in
#endif

#ifdef yyset_in
#define cmplset_in_ALREADY_DEFINED
#else
#define yyset_in cmplset_in
#endif

#ifdef yyget_out
#define cmplget_out_ALREADY_DEFINED
#else
#define yyget_out cmplget_out
#endif

#ifdef yyset_out
#define cmplset_out_ALREADY_DEFINED
#else
#define yyset_out cmplset_out
#endif

#ifdef yyget_leng
#define cmplget_leng_ALREADY_DEFINED
#else
#define yyget_leng cmplget_leng
#endif

#ifdef yyget_text
#define cmplget_text_ALREADY_DEFINED
#else
#define yyget_text cmplget_text
#endif

#ifdef yyget_lineno
#define cmplget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno cmplget_lineno
#endif

#ifdef yyset_lineno
#define cmplset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno cmplset_lineno
#endif

#ifdef yyget_column
#define cmplget_column_ALREADY_DEFINED
#else
#define yyget_column cmplget_column
#endif

#ifdef yyset_column
#define cmplset_column_ALREADY_DEFINED
#else
#define yyset_column cmplset_column
#endif

#ifdef yywrap
#define cmplwrap_ALREADY_DEFINED
#else
#define yywrap cmplwrap
#endif

/* %endif */

#ifdef yyget_lval
#define cmplget_lval_ALREADY_DEFINED
#else
#define yyget_lval cmplget_lval
#endif

#ifdef yyset_lval
#define cmplset_lval_ALREADY_DEFINED
#else
#define yyset_lval cmplset_lval
#endif

#ifdef yyget_lloc
#define cmplget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc cmplget_lloc
#endif

#ifdef yyset_lloc
#define cmplset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc cmplset_lloc
#endif

#ifdef yyalloc
#define cmplalloc_ALREADY_DEFINED
#else
#define yyalloc cmplalloc
#endif

#ifdef yyrealloc
#define cmplrealloc_ALREADY_DEFINED
#else
#define yyrealloc cmplrealloc
#endif

#ifdef yyfree
#define cmplfree_ALREADY_DEFINED
#else
#define yyfree cmplfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define cmplwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[633] =
    {   0,
        7,    7,   94,   93,    8,   93,    9,   93,   10,   93,
       10,   93,   92,   93,    8,   92,   93,   87,   92,   93,
       92,   93,   10,   92,   93,   50,   92,   93,16433,   66,
       92,   93,   92,   93,   92,   93,   92,   93,   54,   92,
       93,   92,   93,   59,   60,   92,   93,16441,16442,   76,
       92,   93,   91,   92,   93,   81,   92,   93,   77,   92,
       93,   82,   92,   93,   92,   93,   48,   50,   92,   93,
    16433,   51,   92,   93,   92,   93,   50,   92,   93,16433,
       50,   92,   93,16433,   50,   92,   93,16433,   50,   92,
       93,16433,   50,   92,   93,16433,   50,   92,   93,16433,

       50,   92,   93,16433,   50,   92,   93,16433,   50,   92,
       93,16433,   50,   92,   93,16433,   50,   92,   93,16433,
       62,   92,   93,   64,   92,   93,   63,   92,   93,   10,
       92,   93,   67,   93,    8,   67,   93,   10,   67,   93,
       54,   67,   93,   10,   67,   93,   64,   67,   93,   63,
       67,   93,   53,   93,    8,   53,   93,   52,   53,   93,
       10,   53,   93,   48,   52,   53,   93,   51,   53,   93,
       52,   53,   93,   52,   53,   93,   52,   53,   93,   52,
       53,   93,   52,   53,   93,   52,   53,   93,   52,   53,
       93,   52,   53,   93,   52,   53,   93,   52,   53,   93,

       52,   53,   93,   10,   53,   93,   55,   92,   93,   92,
       93,   92,   93,   92,   93,    7,   93,    7,    8,   93,
        6,    9,   93,    7,   10,   93,    7,   93,    7,   93,
        7,   93,    7,   93,    7,   10,   93,    8,    9,   10,
       10,   80,   61, 8241,   50,16433,   85,   65,   72,   89,
       74,   70,   75,   71,   90,   88,   60,16442,   73, 8249,
     8250,   59,   60,16441,16442, 8249, 8250,   68,   83,   79,
       78,   84,   50,   47, 8241,   56,   50,16433,   50,16433,
       50,16433,   50,16433,   50,16433,   44,   50,16433,   50,
    16433,   50,16433,   50,16433,   46,   50,16433,   50,16433,

       50,16433,   50,16433,   50,16433,   86,   47,   44,   46,
       55,   55,    7,    7,    8,    6,    9,    7,   10,    7,
        7,    7,    7,    7,   10,   10,   10,   10,   10,   61,
     8250, 8250,   60,16442,   69,   50,   56,   50,16433,   50,
    16433,   50,16433,   50,16433,   50,16433,   43, 8241,   50,
    16433,   50,16433,   20,   50,16433,   50,16433,   45, 8241,
       50,16433,   50,16433,   50,16433,   32,   50,16433,   50,
    16433,   50,16433,   43,   20,   45,   32,    7,    7,    7,
        7,    7,   10,    7,   10,    7,   10,    7,   10,   10,
       10,   10,   10,   50,16433,   50,16433,   50,16433,   50,

    16433,   50,16433,   50,16433,   50,16433,   50,16433,   19,
     8241,   50,16433,   50,16433,   50,16433,   50,16433,   31,
     8241,   50,16433,   50,16433,   19,   31,    5,    7,    7,
        7,    7,    7,   10,    7,   10,    7,   10,    7,   10,
       10,   10,   10,   10,   50,16433,   34,   50,16433,   18,
       50,16433,   50,16433,   50,16433,   50,16433,   50,16433,
       16,   50,16433,   50,16433,   50,16433,   50,16433,   50,
    16433,   50,16433,   50,16433,   34,   18,   16,    5,    7,
        7,    4,    7,    7,    7,   10,    7,   10,    7,   10,
        7,   10,    1,   10,   10,   10,   24,   50,16433,   33,

     8241,   17, 8241,   50,16433,   50,16433,   22,   50,16433,
       50,16433,   15, 8241,   30,   50,16433,   50,16433,   50,
    16433,   12,   50,16433,   38,   50,16433,   40,   50,16433,
       24,   33,   17,   22,   15,   30,   12,   38,   40,    7,
        4,    7,    7,    1,    7,   10,    7,   10,    7,   10,
        1,   10,   10,   10,   23, 8241,   50,16433,   26,   50,
    16433,   21, 8241,   28,   50,16433,   29, 8241,   42,   50,
    16433,   14,   50,16433,   11, 8241,   37, 8241,   39, 8241,
       23,   26,   21,   28,   29,   42,   14,   11,   37,   39,
        2,    7,    7,    1,    7,   10,    7,   10,    7,   10,

       10,   36,   50,16433,   25, 8241,   27, 8241,   41, 8241,
       13, 8241,   36,   25,   27,   41,   13,    2,    7,    7,
        7,   10,   10,   35, 8241,   35,    3,    7,    7,   10,
        3,    7
    } ;

static const flex_int16_t yy_accept[442] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    4,    5,    7,
        9,   11,   13,   15,   18,   21,   23,   26,   30,   33,
       35,   37,   39,   42,   44,   50,   53,   56,   59,   62,
       65,   67,   72,   75,   77,   81,   85,   89,   93,   97,
      101,  105,  109,  113,  117,  121,  124,  127,  130,  133,
      135,  138,  141,  144,  147,  150,  153,  155,  158,  161,
      164,  168,  171,  174,  177,  180,  183,  186,  189,  192,
      195,  198,  201,  204,  207,  210,  212,  214,  216,  218,
      221,  224,  227,  229,  231,  233,  235,  238,  239,  240,

      241,  242,  243,  243,  244,  244,  244,  245,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  256,  257,  259,
      260,  260,  262,  262,  266,  268,  268,  269,  270,  271,
      272,  273,  274,  274,  276,  277,  279,  281,  283,  285,
      287,  290,  292,  294,  296,  299,  301,  303,  305,  307,
      308,  308,  309,  309,  309,  309,  309,  309,  310,  310,
      310,  310,  311,  311,  311,  311,  311,  312,  313,  314,
      316,  318,  320,  321,  322,  323,  324,  326,  327,  328,
      329,  330,  331,  331,  332,  333,  333,  335,  336,  337,
      338,  340,  342,  344,  346,  348,  348,  350,  352,  354,

      357,  359,  359,  361,  363,  365,  367,  370,  372,  374,
      374,  374,  374,  374,  374,  374,  375,  375,  375,  376,
      376,  376,  377,  377,  377,  377,  378,  378,  378,  379,
      380,  381,  382,  384,  386,  388,  390,  391,  392,  393,
      394,  396,  398,  400,  402,  404,  406,  408,  410,  410,
      412,  414,  416,  418,  420,  420,  422,  424,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  427,
      427,  427,  427,  427,  428,  428,  428,  430,  431,  432,
      433,  435,  437,  439,  441,  442,  443,  444,  445,  447,
      450,  453,  455,  457,  459,  461,  464,  466,  468,  470,

      472,  474,  476,  476,  477,  478,  478,  478,  478,  478,
      479,  479,  479,  479,  479,  479,  479,  481,  482,  484,
      485,  487,  489,  491,  493,  495,  496,  497,  500,  500,
      502,  502,  504,  506,  508,  511,  513,  513,  515,  518,
      520,  522,  525,  528,  531,  532,  532,  533,  533,  534,
      534,  534,  535,  535,  535,  536,  537,  537,  537,  538,
      539,  540,  541,  543,  544,  547,  549,  551,  553,  554,
      555,  555,  557,  559,  562,  562,  564,  567,  567,  569,
      572,  575,  575,  577,  577,  579,  579,  581,  581,  582,
      582,  583,  583,  584,  585,  585,  586,  587,  588,  588,

      589,  589,  590,  590,  591,  593,  594,  597,  599,  601,
      602,  605,  605,  607,  607,  609,  609,  611,  611,  613,
      614,  614,  615,  615,  616,  616,  617,  617,  618,  620,
      621,  623,  624,  624,  626,  626,  627,  629,  631,  633,
      633
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,    1,   10,
        1,   11,   12,    1,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,   22,   23,   23,   24,   25,   26,   23,
       23,   23,   23,   23,   23,   27,   23,   23,   23,   28,
       23,   23,   29,   30,   23,   23,   23,   23,   23,   23,
       10,   31,   32,    1,   23,   33,   34,   35,   36,   37,

       38,   39,   23,   23,   40,   23,   41,   42,   23,   43,
       44,   45,   23,   46,   47,   48,   49,   50,   51,   52,
       23,   23,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    5,
        1,    1,    1,    6,    1,    7,    1,    1,    1,    1,
        1,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    1,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    5,    1,    1
    } ;

static const flex_int16_t yy_base[463] =
    {   0,
        0,    2,    9, 1056,    0, 1053,   63,   65,   71,   73,
      128, 1050,  183, 1043,  237,  283, 1047, 1262, 1042, 1033,
        0, 1027, 1262, 1022,  997,   63,    0,  239,   72,   62,
       76,   77,   75,  996,  243,   75, 1262,   79,  993,  986,
        0,  248, 1262,    0,  268,  285,  273,  294,  325,  338,
      341,  351,   63,   66,   67, 1262,  949, 1262,  993, 1262,
      991,    0, 1262,  983, 1262, 1262, 1262,  986, 1262,    0,
      354, 1262,  932,  931,  923,  922,  907,  913,  905,   70,
       47,   57,  908,  938,    0,  931,  926,    0,    0,  932,
      928,    0,  878,  882,  870,  855,  895,  899,  896,    0,

      346, 1262,  249, 1262,  262,  364, 1262,   75, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,  394, 1262,
      320, 1262,  878,  397,  104,  873, 1262, 1262, 1262, 1262,
     1262,    0,  412, 1262,    0,  216,   80,  256,  267,  321,
      423,  348,  295,  392,  435,  365,  368,  396,  403, 1262,
      450, 1262,  845,  851,  845,  850,  837,  454,  840,  822,
      829,  464,  826,  813,  804,  430,    0,    0,    0,  835,
      833,    0,  793,  794,  789,  796,  455,  785,  782,  779,
      769,  285,  469, 1262,  474,  800,  496, 1262,    0,    0,
      380,  467,  466,  417,  405,  516, 1262,  445,  487,  520,

      406,  525, 1262,  471,  494,  495,  538,  505,  507,  770,
      773,   74,  763,  765,  550, 1262,  754,  767,  555,  755,
      560, 1262,  752,  735,  742,  564,  745,  732,  763,  240,
      740,  729,  730,  729,  724,  714,  719,  685,  678,  686,
      533,  542,  537,  544,  555,  552,  557,  562,  608, 1262,
      571,  578,  585,  587,  630, 1262,  592,  597,  666,  669,
      661,  654,  659,  644,  642,  632,  635, 1262,  626,  611,
      622,  613,  644, 1262,  610,  596,    0,  584,  604,  572,
      565,  566,  559,  560,  575,  310,  549,  530,  611,  648,
      660,  622,  629,  633,  634,  677,  647,  517,  648,  662,

      651,  664,  524,  701,  712,  507,  501,  503,  502,  715,
      497,  478,  460,  470,  448,  452,    0,  445,    0,  220,
      460,  345,  432,  416,    0,  402,  381,  724,  729, 1262,
      733, 1262,  700,  685,  738,  708,  753, 1262,  756,  732,
      707,  769,  785,  790,  794,  808, 1262,  811, 1262,  372,
      381,  821,  363,  824, 1262,  838,  353,  338,  842,  847,
      852,  343,    0,  306,    0,  305,  270,    0,  278,  334,
      856, 1262,  709,  865,  868, 1262,  877,  880, 1262,  894,
      904,  909, 1262,  913, 1262,  922, 1262,  925, 1262,  275,
      934,  938, 1262,  948,  951, 1262,  961,  966,  970, 1262,

      979, 1262,  982, 1262,    0,  262,    0,  270,  335,  258,
      992,  995, 1262, 1005, 1262, 1008, 1262, 1018, 1262, 1023,
     1027, 1262, 1036, 1262, 1039, 1262, 1049, 1262,    0,  239,
      209,   76, 1052, 1262, 1062, 1262,    0,   24,    0, 1262,
     1115, 1123, 1131, 1139, 1147, 1154, 1161, 1166, 1171, 1173,
     1178, 1186, 1194, 1201, 1203, 1205, 1213, 1221, 1229, 1237,
     1245, 1253
    } ;

static const flex_int16_t yy_def[463] =
    {   0,
      441,  441,  440,    3,    3,    3,  442,  442,  442,  442,
      440,   11,  440,   13,  443,  443,  440,  440,  440,  440,
      444,  444,  440,  440,  440,  445,  444,  446,  440,  440,
      440,  440,  440,  440,  447,  440,  440,  440,  440,  440,
      448,  446,  440,  449,  446,  446,  446,  446,  446,  446,
      446,  446,   52,   52,   52,  440,  440,  440,  444,  440,
      440,  444,  440,  444,  440,  440,  440,  440,  440,  444,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  444,  450,  440,  440,  451,  452,  452,
      440,  453,  452,  452,  452,  452,  453,  440,  440,  444,

      444,  440,  445,  440,  445,  440,  440,   52,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  454,  440,
      447,  440,  440,  447,  440,  440,  440,  440,  440,  440,
      440,  455,  440,  440,  456,   52,   52,   52,   52,   52,
      446,   52,   52,   52,  446,   52,   52,   52,   52,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  450,  450,  452,  452,
      440,  453,  452,  452,  452,  452,  453,  444,  444,  444,
      444,  445,  454,  440,  440,  440,  454,  440,  455,  456,
       52,   52,   52,   52,   52,  440,  440,   52,   52,  446,

       52,  440,  440,   52,   52,   52,  446,   52,   52,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  452,  452,
      452,  452,  453,  453,  453,  453,  444,  444,  444,  444,
       52,   52,   52,   52,   52,   52,   52,   52,  440,  440,
       52,   52,   52,   52,  440,  440,   52,   52,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  457,  452,  452,  452,
      453,  453,  453,  453,  444,  444,  444,  444,   52,  446,
      446,   52,   52,   52,   52,  446,   52,   52,   52,   52,

       52,   52,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  457,  452,  458,  452,
      453,  453,  453,  453,  459,  444,  444,  446,  440,  440,
      440,  440,   52,   52,  446,   52,  440,  440,  446,   52,
       52,  446,  446,  446,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  452,  458,  452,  460,  453,  453,  459,  444,  444,
      440,  440,   52,  446,  440,  440,  446,  440,  440,  446,
      446,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  461,  452,  460,  453,  453,  444,
      446,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  461,  452,
      453,  444,  440,  440,  440,  440,  462,  453,  462,    0,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440
    } ;

static const flex_int16_t yy_nxt[1318] =
    {   0,
      440,   19,   20,   19,   20,  440,   21,  440,   22,   23,
       24,   20,   23,   25,   26,   27,   28,   29,   23,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   28,   28,   28,   28,   28,   28,   28,   42,   41,
       43,   44,   45,   46,   47,   48,   49,   28,   50,   28,
       51,   52,   53,   54,   55,   28,   28,   28,   28,   28,
       28,   56,   57,   58,   61,   20,   61,   20,  104,   62,
      321,   64,   61,   20,   61,   20,   63,   62,   63,   64,
      109,  111,  112,  110,   63,  162,   63,  113,  118,  115,
      119,  126,  163,  105,  127,  114,  116,  117,  128,  129,

      108,  145,  164,  108,  149,  165,  108,  160,  146,  108,
      108,  147,  108,  161,  148,  186,  186,  192,  108,  187,
      261,  262,  285,  108,   65,   66,   65,   66,   67,   68,
       20,   67,   67,   69,   70,   69,   67,   69,   67,   67,
       67,   67,   67,   69,   67,   67,   67,   67,   67,   67,
       69,   69,   69,   69,   69,   69,   69,   71,   67,   72,
       67,   73,   74,   75,   76,   77,   69,   78,   69,   79,
       80,   81,   82,   83,   69,   69,   69,   69,   69,   69,
       69,   67,   67,   23,   24,   20,   23,   23,   23,   27,
       85,   23,   23,   23,   86,   87,   23,   23,   23,   23,

       37,   23,   23,   23,   23,   85,   85,   85,   85,   85,
       85,   85,   85,   88,   23,   23,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   23,   23,   58,   90,   91,
      106,  106,  106,   92,  121,  121,  121,  364,  107,  133,
      133,  133,  438,  108,  104,  437,  123,  134,  124,  108,
       93,   94,  191,   95,  364,   96,  278,  182,  125,  106,
      106,  106,   93,   94,  106,  106,  106,  107,   95,  105,
      125,  278,  107,   96,   90,   91,  106,  106,  106,   97,
      104,  107,  105,  108,  107,  106,  106,  106,  193,  108,

      134,  432,  194,  107,  108,  321,   93,   94,  430,   95,
      108,   96,  420,  285,  136,  105,  138,  409,   93,   94,
      107,  121,  121,  121,   95,  107,  106,  106,  106,   96,
      137,  139,  108,  440,  107,  440,  326,  107,  108,  106,
      106,  106,  106,  106,  106,  200,  107,  107,  408,  406,
      107,  326,  106,  106,  106,  151,  151,  151,  108,  405,
      107,  410,  431,  152,  108,  106,  106,  106,  195,  178,
      179,  366,  180,  107,  181,  398,  140,  107,  410,  431,
      141,  178,  179,  199,  142,  108,  366,  180,  143,  397,
      107,  108,  181,  107,  144,  183,  183,  183,  121,  121,

      121,  204,  108,  107,  394,  108,  152,  205,  108,  119,
      123,  108,  124,  133,  133,  133,  107,  241,  391,  185,
      390,  134,  125,  108,  196,  196,  196,  201,  370,  108,
      206,  185,  197,  108,  125,  108,  202,  202,  202,  108,
      108,  207,  246,  108,  203,  369,  108,  208,  108,  251,
      209,  151,  151,  151,  108,  215,  215,  215,  245,  152,
      108,  367,  198,  216,  134,  221,  221,  221,  226,  321,
      183,  183,  183,  222,  227,  197,  365,  228,  233,  234,
      362,  235,  108,  236,  440,  186,  186,  203,  108,  187,
      233,  234,  247,  217,  361,  360,  235,  183,  183,  183,

      242,  236,  152,  108,  108,  359,  216,  358,  252,  108,
      108,  187,  243,  244,  108,  357,  222,  196,  196,  196,
      248,  249,  249,  249,  108,  197,  202,  202,  202,  250,
      108,  108,  108,  356,  203,  353,  254,  108,  108,  255,
      255,  255,  257,  253,  108,  352,  351,  256,  108,  350,
      108,  215,  215,  215,  340,  258,  267,  267,  267,  216,
      108,  221,  221,  221,  268,  273,  273,  273,  197,  222,
      108,  345,  250,  274,  108,  327,  108,  203,  289,  108,
      108,  108,  290,  292,  291,  108,  285,  108,  293,  108,
      256,  325,  108,  324,  108,  108,  295,  294,  108,  108,

      108,  323,  216,  296,  322,  108,  321,  268,  108,  249,
      249,  249,  222,  297,  108,  108,  274,  250,  299,  320,
      319,  108,  108,  298,  108,  301,  300,  318,  108,  108,
      108,  255,  255,  255,  108,  108,  267,  267,  267,  256,
      108,  316,  302,  315,  268,  273,  273,  273,  108,  329,
      329,  329,  314,  274,  108,  313,  312,  330,  328,  108,
      250,  331,  331,  331,  333,  108,  108,  336,  311,  332,
      108,  108,  108,  310,  334,  335,  108,  108,  337,  337,
      337,  309,  256,  339,  108,  108,  338,  268,  108,  308,
      108,  108,  307,  306,  108,  341,  274,  342,  343,  108,

      330,  108,  346,  346,  346,  108,  344,  108,  305,  304,
      347,  303,  332,  348,  348,  348,  354,  354,  354,  288,
      287,  349,  374,  286,  355,  371,  371,  371,  108,  338,
      329,  329,  329,  372,  331,  331,  331,  108,  330,  375,
      375,  375,  332,  108,  381,  108,  411,  376,  373,  377,
      108,  108,  108,  347,  337,  337,  337,  378,  378,  378,
      285,  284,  338,  283,  349,  379,  282,  355,  380,  108,
      382,  382,  382,  281,  280,  108,  372,  279,  383,  277,
      276,  330,  275,  272,  271,  332,  384,  384,  384,  270,
      376,  386,  386,  386,  385,  388,  388,  388,  269,  387,

      266,  265,  264,  389,  263,  338,  260,  259,  379,  346,
      346,  346,  348,  348,  348,  187,  240,  347,  239,  238,
      349,  383,  392,  392,  392,  354,  354,  354,  237,  232,
      393,  231,  230,  355,  229,  171,  170,  385,  225,  395,
      395,  395,  387,  399,  399,  399,  389,  396,  401,  401,
      401,  400,  224,  403,  403,  403,  402,  371,  371,  371,
      347,  404,  223,  349,  220,  372,  412,  412,  412,  375,
      375,  375,  219,  393,  413,  218,  355,  376,  414,  414,
      414,  378,  378,  378,  214,  213,  415,  212,  211,  379,
      396,  210,  188,  119,  400,  416,  416,  416,   99,  402,

       98,  177,  176,  417,  404,  418,  418,  418,  372,  175,
      382,  382,  382,  419,  384,  384,  384,  413,  383,  174,
      376,  173,  385,  386,  386,  386,  388,  388,  388,  415,
      171,  387,  379,  170,  389,  421,  421,  421,  115,  392,
      392,  392,  113,  422,  101,  166,  417,  393,  159,  423,
      423,  423,  395,  395,  395,  158,  419,  424,  157,  156,
      396,  383,  425,  425,  425,  385,  155,  427,  427,  427,
      426,  399,  399,  399,  387,  428,  154,  389,  153,  400,
      401,  401,  401,  403,  403,  403,  422,   98,  402,  101,
      393,  404,   98,  433,  433,  433,  412,  412,  412,  101,

      424,  434,  150,  396,  413,  131,  414,  414,  414,  416,
      416,  416,  130,  426,  415,  120,  102,  417,  428,  418,
      418,  418,  400,   98,  435,  435,  435,  419,  421,  421,
      421,  402,  436,  101,  404,   99,  422,  423,  423,  423,
      425,  425,  425,   98,  434,  424,  440,  413,  426,   59,
      427,  427,  427,  433,  433,  433,   84,  415,  428,   59,
      417,  434,   59,  435,  435,  435,  440,  440,  440,  440,
      419,  436,  440,  440,  440,  436,  440,  440,  440,  422,
      440,  440,  440,  440,  440,  440,  440,  440,  424,  440,
      440,  426,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  428,  440,  440,  434,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  436,   18,   18,   18,   18,   18,
       18,   18,   18,   60,   60,   60,   60,   60,   60,   60,
       60,   89,   89,   89,   89,   89,   89,   89,   89,  100,
      100,  440,  100,  100,  100,  100,  100,  103,  103,  440,
      103,  103,  103,  103,  103,  108,  108,  440,  108,  440,
      108,  108,  122,  122,  122,  440,  122,  122,  122,  132,
      440,  440,  440,  132,  135,  440,  440,  440,  135,  167,
      167,  168,  440,  440,  440,  168,  169,  169,  440,  169,
      169,  169,  169,  169,  172,  172,  440,  172,  172,  172,

      172,  172,  184,  184,  184,  440,  440,  184,  184,  189,
      189,  190,  190,  317,  317,  440,  317,  317,  317,  317,
      317,  363,  363,  440,  363,  363,  363,  363,  363,  368,
      368,  440,  368,  368,  368,  368,  368,  407,  407,  440,
      407,  407,  407,  407,  407,  429,  429,  440,  429,  429,
      429,  429,  429,  439,  439,  440,  439,  439,  439,  439,
      439,   17,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440
    } ;

static const flex_int16_t yy_chk[1318] =
    {   0,
        0,    1,    1,    2,    2,    0,    1,    0,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    8,    8,   26,    7,
      438,    8,    9,    9,   10,   10,    7,    9,    8,   10,
       29,   30,   30,   29,    9,   81,   10,   31,   33,   32,
       33,   36,   81,   26,   36,   31,   32,   32,   38,   38,

       53,   53,   82,   54,   55,   82,   53,   80,   53,   54,
       55,   54,  108,   80,   54,  125,  125,  137,  108,  125,
      212,  212,  432,  137,    9,    9,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   15,
       28,   28,   28,   15,   35,   35,   35,  320,   28,   42,
       42,   42,  431,  136,  103,  430,   35,   42,   35,  136,
       15,   15,  136,   15,  320,   15,  230,  105,   35,   45,
       45,   45,   15,   15,   47,   47,   47,   45,   15,  103,
       35,  230,   47,   15,   16,   16,   46,   46,   46,   16,
      182,   28,  105,  138,   46,   48,   48,   48,  138,  138,

       42,  410,  139,   48,  139,  408,   16,   16,  406,   16,
      139,   16,  390,  369,   45,  182,   47,  367,   16,   16,
       45,  121,  121,  121,   16,   47,   49,   49,   49,   16,
       46,   48,  143,  121,   49,  121,  286,   46,  143,   50,
       50,   50,   51,   51,   51,  143,   48,   50,  366,  364,
       51,  286,   52,   52,   52,   71,   71,   71,  140,  362,
       52,  370,  409,   71,  140,  106,  106,  106,  140,  101,
      101,  322,  101,  106,  101,  358,   49,   49,  370,  409,
       50,  101,  101,  142,   51,  142,  322,  101,   52,  357,
       50,  142,  101,   51,   52,  119,  119,  119,  124,  124,

      124,  146,  146,   52,  353,  147,   71,  147,  146,  119,
      124,  147,  124,  133,  133,  133,  106,  191,  351,  119,
      350,  133,  124,  191,  141,  141,  141,  144,  327,  144,
      148,  119,  141,  148,  124,  144,  145,  145,  145,  148,
      149,  149,  195,  201,  145,  326,  149,  149,  195,  201,
      149,  151,  151,  151,  194,  158,  158,  158,  194,  151,
      194,  324,  141,  158,  133,  162,  162,  162,  166,  323,
      183,  183,  183,  162,  166,  141,  321,  166,  177,  177,
      318,  177,  198,  177,  183,  185,  185,  145,  198,  185,
      177,  177,  198,  158,  316,  315,  177,  187,  187,  187,

      192,  177,  151,  193,  192,  314,  158,  313,  204,  193,
      192,  187,  193,  193,  204,  312,  162,  196,  196,  196,
      199,  200,  200,  200,  199,  196,  202,  202,  202,  200,
      199,  205,  206,  311,  202,  309,  206,  205,  206,  207,
      207,  207,  208,  205,  209,  308,  307,  207,  208,  306,
      209,  215,  215,  215,  298,  209,  219,  219,  219,  215,
      298,  221,  221,  221,  219,  226,  226,  226,  196,  221,
      241,  303,  200,  226,  243,  288,  241,  202,  241,  242,
      243,  244,  242,  244,  243,  242,  287,  244,  245,  246,
      207,  285,  245,  284,  247,  246,  247,  246,  245,  248,

      247,  283,  215,  248,  282,  248,  281,  219,  251,  249,
      249,  249,  221,  251,  251,  252,  226,  249,  253,  280,
      279,  252,  253,  252,  254,  257,  254,  278,  253,  257,
      254,  255,  255,  255,  258,  257,  267,  267,  267,  255,
      258,  276,  258,  275,  267,  273,  273,  273,  289,  290,
      290,  290,  272,  273,  289,  271,  270,  290,  289,  292,
      249,  291,  291,  291,  292,  292,  293,  295,  269,  291,
      294,  295,  293,  266,  293,  294,  294,  295,  296,  296,
      296,  265,  255,  297,  297,  299,  296,  267,  301,  264,
      297,  299,  263,  262,  301,  299,  273,  300,  301,  300,

      290,  302,  304,  304,  304,  300,  302,  302,  261,  260,
      304,  259,  291,  305,  305,  305,  310,  310,  310,  240,
      239,  305,  334,  238,  310,  328,  328,  328,  334,  296,
      329,  329,  329,  328,  331,  331,  331,  333,  329,  335,
      335,  335,  331,  333,  341,  336,  373,  335,  333,  336,
      341,  336,  373,  304,  337,  337,  337,  339,  339,  339,
      237,  236,  337,  235,  305,  339,  234,  310,  340,  340,
      342,  342,  342,  233,  232,  340,  328,  231,  342,  229,
      228,  329,  227,  225,  224,  331,  343,  343,  343,  223,
      335,  344,  344,  344,  343,  345,  345,  345,  220,  344,

      218,  217,  214,  345,  213,  337,  211,  210,  339,  346,
      346,  346,  348,  348,  348,  186,  181,  346,  180,  179,
      348,  342,  352,  352,  352,  354,  354,  354,  178,  176,
      352,  175,  174,  354,  173,  171,  170,  343,  165,  356,
      356,  356,  344,  359,  359,  359,  345,  356,  360,  360,
      360,  359,  164,  361,  361,  361,  360,  371,  371,  371,
      346,  361,  163,  348,  161,  371,  374,  374,  374,  375,
      375,  375,  160,  352,  374,  159,  354,  375,  377,  377,
      377,  378,  378,  378,  157,  156,  377,  155,  154,  378,
      356,  153,  126,  123,  359,  380,  380,  380,   99,  360,

       98,   97,   96,  380,  361,  381,  381,  381,  371,   95,
      382,  382,  382,  381,  384,  384,  384,  374,  382,   94,
      375,   93,  384,  386,  386,  386,  388,  388,  388,  377,
       91,  386,  378,   90,  388,  391,  391,  391,   87,  392,
      392,  392,   86,  391,   84,   83,  380,  392,   79,  394,
      394,  394,  395,  395,  395,   78,  381,  394,   77,   76,
      395,  382,  397,  397,  397,  384,   75,  398,  398,  398,
      397,  399,  399,  399,  386,  398,   74,  388,   73,  399,
      401,  401,  401,  403,  403,  403,  391,   68,  401,   64,
      392,  403,   61,  411,  411,  411,  412,  412,  412,   59,

      394,  411,   57,  395,  412,   40,  414,  414,  414,  416,
      416,  416,   39,  397,  414,   34,   25,  416,  398,  418,
      418,  418,  399,   24,  420,  420,  420,  418,  421,  421,
      421,  401,  420,   22,  403,   20,  421,  423,  423,  423,
      425,  425,  425,   19,  411,  423,   17,  412,  425,   14,
      427,  427,  427,  433,  433,  433,   12,  414,  427,    6,
      416,  433,    4,  435,  435,  435,    0,    0,    0,    0,
      418,  435,    0,    0,    0,  420,    0,    0,    0,  421,
        0,    0,    0,    0,    0,    0,    0,    0,  423,    0,
        0,  425,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  427,    0,    0,  433,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  435,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  444,
      444,    0,  444,  444,  444,  444,  444,  445,  445,    0,
      445,  445,  445,  445,  445,  446,  446,    0,  446,    0,
      446,  446,  447,  447,  447,    0,  447,  447,  447,  448,
        0,    0,    0,  448,  449,    0,    0,    0,  449,  450,
      450,  451,    0,    0,    0,  451,  452,  452,    0,  452,
      452,  452,  452,  452,  453,  453,    0,  453,  453,  453,

      453,  453,  454,  454,  454,    0,    0,  454,  454,  455,
      455,  456,  456,  457,  457,    0,  457,  457,  457,  457,
      457,  458,  458,    0,  458,  458,  458,  458,  458,  459,
      459,    0,  459,  459,  459,  459,  459,  460,  460,    0,
      460,  460,  460,  460,  460,  461,  461,    0,  461,  461,
      461,  461,  461,  462,  462,    0,  462,  462,  462,  462,
      462,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[94] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static const flex_int16_t yy_rule_linenum[93] =
    {   0,
       96,   98,   99,  100,  101,  103,  104,  108,  109,  112,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  152,  153,  154,  155,  156,  157,  160,  164,
      177,  178,  180,  184,  185,  192,  195,  196,  198,  199,
      201,  204,  207,  213,  215,  216,  218,  223,  224,  225,
      226,  227,  228,  230,  231,  233,  236,  237,  238,  239,
      240,  241,  242,  243,  245,  246,  247,  249,  250,  252,
      254,  257

    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CMPL_Scanner.l"
/***********************************************************************
 *  This code is part of CMPL
 *
 *  Copyright (C) 2007, 2008, 2009, 2010, 2011 Thomas Schleiff - Halle(Saale), 
 *  Germany and Mike Steglich - Technical University of Applied Sciences
 *  Wildau, Germany 
 *
 *  Coliop3 and CMPL are projects of the Technical University of 
 *  Applied Sciences Wildau and the Institute for Operations Research 
 *  and Business Management at the Martin Luther University 
 *  Halle-Wittenberg.
 *  Please visit the project homepage <www.coliop.org>
 * 
 *  CMPL is free software; you can redistribute it and/or modify it 
 *  under the terms of the GNU General Public License as published by 
 *  the Free Software Foundation; either version 3 of the License, or 
 *  (at your option) any later version.
 * 
 *  CMPL is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
 *  License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 ***********************************************************************/
#line 31 "CMPL_Scanner.l"
#include "CompilerContext.hh"


/* By default yylex returns int, we use token_type.
Unfortunately yyterminate by default returns 0, which is
not of token_type.  */
#define yyterminate() return token::END

// scanner uses YYSTYPE and YYLTYPE, but parser yy::Cmpl_Parser::semantic_type and yy::Cmpl_Parser::location_type
#define YYSTYPE cmpl::CMPL_Parser::semantic_type
#define YYLTYPE cmpl::CMPL_Parser::location_type

// handle locations
#define YY_USER_ACTION  yylloc->step(); yylloc->columns(yyleng);

// cmpl main object
#define glvar PARSE_CONTEXT.glvar

typedef cmpl::CMPL_Parser::token token;
int prevSC;
#line 1350 "_CMPL_Scanner.cc"
/*%option ansi-prototypes*/
#line 63 "CMPL_Scanner.l"
	/* Scanner states */
		/* standard cmpl state */

		/* scan cmpl input, possible assign modifier or directive */

		/* after end of a codeblock: insert semicolon */

		/* after end of a codeblock: insert semicolon but not if '}' follow */

		/* after closing ']': possible array cast */

		/* cmpl subsymbol expected */

		/* position mark */

#line 1368 "_CMPL_Scanner.cc"

#define INITIAL 0
#define SC_Cmpl 1
#define SC_CmplAM 2
#define SC_CmplCBEndA 3
#define SC_CmplCBEndB 4
#define SC_ArrCast 5
#define SC_Subsym 6
#define SC_Position 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 85 "CMPL_Scanner.l"


	/* set initial scanner state */
	{
		if (YY_START == 0) {
			BEGIN(SC_CmplAM);
		}
	}


    /* position marks */
#line 1759 "_CMPL_Scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 441 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1262 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 93 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 93 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 94 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 96 "CMPL_Scanner.l"
{ PARSE_CONTEXT.setScanModeRestore(YY_START); BEGIN(SC_Position); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 98 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseDefLocPM(yylloc, yytext+7); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseStartPosPM(yylloc, yytext+9); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 100 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseLinePM(yylloc, yytext+5); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "CMPL_Scanner.l"
{ PARSE_CONTEXT.parseColPM(yylloc, yytext+4); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 103 "CMPL_Scanner.l"
{ BEGIN(PARSE_CONTEXT.scanModeRestore()); yylloc->lines(yyleng-1); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "CMPL_Scanner.l"
{ PARSE_CONTEXT.outErrorPositionMark(yylloc, yytext); }
	YY_BREAK
/* Whitespaces */
case 8:
YY_RULE_SETUP
#line 108 "CMPL_Scanner.l"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 109 "CMPL_Scanner.l"
{ yylloc->lines(yyleng); }
	YY_BREAK
/* comments (only line comments starting with '#' are allowed here (the precompiler must handle c comments and c++ comments) */
case 10:
YY_RULE_SETUP
#line 112 "CMPL_Scanner.l"
;
	YY_BREAK
case YY_STATE_EOF(SC_CmplCBEndA):
case YY_STATE_EOF(SC_CmplCBEndB):
#line 114 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s.init(); return(token::EOSTATEMENT); }
	YY_BREAK
case YY_STATE_EOF(SC_Cmpl):
case YY_STATE_EOF(SC_CmplAM):
case YY_STATE_EOF(SC_ArrCast):
case YY_STATE_EOF(SC_Subsym):
case YY_STATE_EOF(SC_Position):
#line 115 "CMPL_Scanner.l"
{ yyterminate(); }
	YY_BREAK
/* cmpl keywords */
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 120 "CMPL_Scanner.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 120 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPublic;   yylval->s._name = "public";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 122 "CMPL_Scanner.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 122 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorPrivate;  yylval->s._name = "private";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 124 "CMPL_Scanner.l"
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 124 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorLocal;    yylval->s._name = "local";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 126 "CMPL_Scanner.l"
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 126 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorConst;    yylval->s._name = "const";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 128 "CMPL_Scanner.l"
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 128 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorNew;      yylval->s._name = "new";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 130 "CMPL_Scanner.l"
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 130 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorExtern;   yylval->s._name = "extern";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 132 "CMPL_Scanner.l"
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 132 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorAssert;   yylval->s._name = "assert";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 134 "CMPL_Scanner.l"
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 134 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorDeclare;  yylval->s._name = "declare";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 136 "CMPL_Scanner.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 136 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorInitial;  yylval->s._name = "initial";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 138 "CMPL_Scanner.l"
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 138 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorNocond;   yylval->s._name = "nocond";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 140 "CMPL_Scanner.l"
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 140 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRef;      yylval->s._name = "ref";      PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 33:
/* rule 33 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 142 "CMPL_Scanner.l"
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 142 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorBreak;    yylval->s._name = "break";    PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 144 "CMPL_Scanner.l"
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 144 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorContinue; yylval->s._name = "continue"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }					
	YY_BREAK
case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 146 "CMPL_Scanner.l"
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 146 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorRepeat;   yylval->s._name = "repeat";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 148 "CMPL_Scanner.l"
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 148 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorReturn;   yylval->s._name = "return";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ASSIGN); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 150 "CMPL_Scanner.l"
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 150 "CMPL_Scanner.l"
{ if (YY_START==SC_ArrCast) { BEGIN(SC_Cmpl); } yylval->s.init(); yylval->s._u.i = (int)cmpl::modificatorOrdered;  yylval->s._name = "ordered";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::MOD_ORDERED); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 153 "CMPL_Scanner.l"
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 153 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "in"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_IN); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 155 "CMPL_Scanner.l"
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 155 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "of"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_OF); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 157 "CMPL_Scanner.l"
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 157 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "^T"; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OPERATOR_TRANSPOSE); }
	YY_BREAK
/* symbols */
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 160 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext, *yylloc, false, true, cmpl::markForSymbolNameNo));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  return(token::SYMBOL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 164 "CMPL_Scanner.l"
{ cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : (yytext[0] == '@' ? cmpl::markForSymbolNameCB : cmpl::markForSymbolNameNo));
																	  yylval->s.init();
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, false, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(yylval->s._u.exp->sym()->valid() || mark != cmpl::markForSymbolNameNo ? cmpl::scanPrevTokenDefSymbol : cmpl::scanPrevTokenUndefSymbol);
																	  if (YY_START == SC_CmplAM && mark == cmpl::markForSymbolNameNo && yylval->s._u.exp->sym()->visible()) {
																		cmpl::SpecialSymbol spec = yylval->s._u.exp->sym()->special();
																		if (SPECIALSYMBOL_IS_MODIFICATOR(spec)) { return(SPECIALSYMBOL_IS_OBJTYPE(spec) ? token::SYMBOL_OBJTYPE : token::SYMBOL_DATATYPE); }
																	  }
																	  BEGIN(SC_Cmpl);
																	  return(token::SYMBOL);
																	}
	YY_BREAK
/* array cast */
case 51:
YY_RULE_SETUP
#line 177 "CMPL_Scanner.l"
{ BEGIN(SC_ArrCast); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::TUPLE_END); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "CMPL_Scanner.l"
{ /* possible array cast, return token::ARRCAST here, and unput the current char to be scanned again */
																	  BEGIN(SC_Cmpl); unput(*yytext); yylloc->columns(-1); yylval->s.init(); return(token::ARRCAST); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 180 "CMPL_Scanner.l"
{ /* no array cast, unput the current char to be scanned again */
																	  BEGIN(SC_Cmpl); unput(*yytext); yylloc->columns(-1); /*no return*/ }
	YY_BREAK
/* subsymbols */
case 54:
YY_RULE_SETUP
#line 184 "CMPL_Scanner.l"
{ BEGIN(SC_Subsym); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::SUBSYM_OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init();
																	  cmpl::MarkForSymbolName mark = (yytext[0] == '\\' ? cmpl::markForSymbolNameReg : cmpl::markForSymbolNameNo);
																	  yylval->s.setExp(PARSE_CONTEXT.searchInsertSymbolExp(yytext + (mark==cmpl::markForSymbolNameNo ? 0 : 1), *yylloc, true, true, mark));
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenDefSymbol);
																	  return(token::SUBSYMBOL); }
	YY_BREAK
/* linename prefix */
case 56:
YY_RULE_SETUP
#line 192 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = PARSE_CONTEXT.data()->globStrings()->store(yytext+1); return(token::LINENAME_PREF); }
	YY_BREAK
/* literals */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER_MULT); }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER_MULT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 198 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::INT_NUMBER); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 199 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::DOUBLE_NUMBER); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 201 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); yylval->s._u.s = yytext; return(token::STRING); }
	YY_BREAK
/* codeblock */
case 62:
YY_RULE_SETUP
#line 204 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._u.sptt = PARSE_CONTEXT.scanPrevTokenType();
																	  PARSE_CONTEXT.startScannerScopeLevel();
																	  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_BEGIN); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 207 "CMPL_Scanner.l"
{ switch (PARSE_CONTEXT.endScannerScopeLevel(yylloc)) {
																	  	case cmpl::codeBlockExprModeStatementStart: BEGIN(SC_CmplCBEndA); break;
																		case cmpl::codeBlockExprModeCBBodyStart:    BEGIN(SC_CmplCBEndB); break;
																		default: BEGIN(SC_CmplAM); break;
																	  }
																	  yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_END); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 213 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(token::CODEBLOCK_ALT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 215 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&+"; yylval->s._u.b = false;  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRef); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 216 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&";  yylval->s._u.b = true; PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenCBRefPure); return(token::REF_CODEBLOCK); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 218 "CMPL_Scanner.l"
{ /* return token::EOSTATEMENT here, and unput the current char to be scanned again */
																	  if (*yytext != ';') { unput(*yytext); yylloc->columns(-1); PARSE_CONTEXT.warnCBInsertEOS(yylloc); }
																	  BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* operator signs */
case 68:
YY_RULE_SETUP
#line 223 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ":=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 224 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "::="; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 225 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "+=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_ADD); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 226 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "-=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_SUB); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 227 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_MUL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 228 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "/=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::ASSIGN_ND_DIV); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 230 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "++"; yylval->s._u.i =  1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 231 "CMPL_Scanner.l"
{ yylval->s.init(); yylval->s._name = "--"; yylval->s._u.i = -1; PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INCDEC); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 233 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); yylval->s._name = ":";	PARSE_CONTEXT.resetScanPrevTokenType();
																	  PARSE_CONTEXT.setScanPrevTokenType(cmpl::scanPrevTokenColon); return(token::COLON); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 236 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "=";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 237 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "==";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_EQ2); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 238 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 239 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_NE2); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 240 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 241 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 242 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "<=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_LE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 243 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = ">=";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::COMP_GE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 245 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "&&";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_AND); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 246 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "||";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_OR); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 247 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "!";   PARSE_CONTEXT.resetScanPrevTokenType(); return(token::LOG_NOT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 249 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "..";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::POINTS); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 250 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "*>";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::INTERSECT_RR); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 252 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); yylval->s._name = "->";  PARSE_CONTEXT.resetScanPrevTokenType(); return(token::OBJ_TO); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 254 "CMPL_Scanner.l"
{ BEGIN(SC_CmplAM); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); PARSE_CONTEXT.setPrvEOSScopeLevel(); return(token::EOSTATEMENT); }
	YY_BREAK
/* other characters */
case 92:
YY_RULE_SETUP
#line 257 "CMPL_Scanner.l"
{ BEGIN(SC_Cmpl); yylval->s.init(); PARSE_CONTEXT.resetScanPrevTokenType(); return(cmpl::CMPL_Parser::token_type(*yytext)); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 261 "CMPL_Scanner.l"
ECHO;
	YY_BREAK
#line 2458 "_CMPL_Scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 441 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 441 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 440);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 261 "CMPL_Scanner.l"


namespace cmpl
{
	/**
	 * Starts the scanner
	 */
	void CompilerContext::scanBegin()
	{
		// initialize the scanner
		yylex_init(&_scanner);
		cmplset_debug(_modp->traceScanning(), _scanner);

		GET_DATA(CmplSourceInput, inp);
		const char *buf = inp->contents().c_str();
		yy_scan_string (buf, _scanner);
	}

	/**
	 * Stops the scanner
	 */
	void CompilerContext::scanEnd()
	{
		// release scanner
		yylex_destroy(_scanner);
	}
}


